# Generate vectors.S, the trap/interrupt entry points.
# There has to be one entry point per interrupt number
# since otherwise there's no way for trap() to discover
# the interrupt number.

print("# generated by vectors.py - do not edit")
print("# alltraps is defined in trapasm.S")
print("# handlers")
print(".globl alltraps")

for i in range(256):
    print(".globl vector{}".format(i))
    print("vector{}:".format(i))
    if not (i == 8 or (i >= 10 and i <= 14) or i == 17):
        print("  pushl $0")
    print("  pushl ${}".format(i))
    print("  jmp alltraps")

print("\n# vector table")
print(".data")

print(".globl vectors")
print("vectors:")
for i in range(256):
    print("  .long vector{}".format(i))


# sample output:
#   .globl alltraps
#   .globl vector0
#   vector0:
#     pushl $0
#     pushl $0
#     jmp alltraps
#   .globl vector1
#   vector1:
#     pushl $0
#     pushl $1
#     jmp alltraps
#   .globl vector2
#   ...
#   
#   # vector table
#   .data
#   .globl vectors
#   vectors:
#     .long vector0
#     .long vector1
#     .long vector2
#   ...


"""
tips :

In assembly language, the .globl directive is used to declare a label as globally 
visible or global. By using .globl before a label declaration, you are indicating 
that the label can be accessed and referenced from other parts of the code or from 
external modules.

Here :

#   .globl vector0
#   vector0:

the label vector0 is declared as .globl vector0 but initialized as vector0:

----------------

The purpose of the vector table section is to create an array or table of these trap 
handlers' addresses. Each .long directive initializes a 32-bit word in memory with 
the address of the corresponding trap handler. This table can then be used by the 
system to look up and execute the appropriate trap handler based on the interrupt 
or trap number.

The .long directive is used in assembly language to define a long (32-bit) word. 
It specifies that the assembler should reserve a 32-bit memory space and initialize 
it with a given value.

.long vector0 means that the memory space allocated for the first element of the vectors 
array should be initialized with the value of vector0. Similarly, .long vector1 and 
.long vector2 initialize the second and third elements of the array, respectively, 
with the values of vector1 and vector2.

"""